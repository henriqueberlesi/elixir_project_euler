defmodule Number do
  @moduledoc """
  Documentation for `Number`.
  """

  @doc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

  ## Examples

      iex> Number.sum_of_evens_fibonacci(4000000)
      4613732

  """
  def sum_of_evens_fibonacci(n) do
    Stream.iterate(0, &(&1 + 1))
    |> Stream.map(&fibonacci/1)
    |> Enum.take_while(&(&1 < n))
    |> filter_evens()
    |> Enum.sum()
  end

  defp filter_evens(enum) do
    Enum.filter(enum, fn x -> rem(x, 2) == 0 end)
  end

  defp fibonacci(n) when n <= 1, do: 1

  defp fibonacci(n) do
    fibonacci(n - 1) + fibonacci(n - 2)
  end
end
